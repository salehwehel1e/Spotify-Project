{"ast":null,"code":"var _jsxFileName = \"/workspaces/Spotify-Project/src/App.tsx\";\nimport React, { Component } from 'react';\nimport { Buffer } from 'buffer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: '',\n      track: null\n    };\n  }\n  componentDidMount() {\n    // Make the request to get the access token\n    const client_id = '4b8ab60857d248d789e298cc29c88f8f';\n    const client_secret = 'e1102c7222d24e10bd366fcbcd9ebfb9';\n    const details = 'grant_type=client_credentials';\n    const formBody = details;\n    fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n        Authorization: 'Basic ' + Buffer.from(client_id + ':' + client_secret).toString('base64')\n      },\n      body: formBody\n    }).then(response => response.json()).then(data => {\n      this.setState({\n        token: data.access_token\n      });\n      this.getTrackInfo(data.access_token);\n    }).catch(error => console.error(error));\n  }\n  getTrackInfo(token) {\n    // Make the request to get track information\n    fetch('https://api.spotify.com/v1/tracks/0AAMnNeIc6CdnfNU85GwCH', {\n      // Replace {track_id} with the actual track ID\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(response => response.json()).then(data => {\n      this.setState({\n        track: data\n      });\n    }).catch(error => console.error(error));\n  }\n  render() {\n    const {\n      track\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: track ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: track.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Artist: \", track.artists[0].name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Album: \", track.album.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading track information...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Buffer","jsxDEV","_jsxDEV","App","constructor","props","state","token","track","componentDidMount","client_id","client_secret","details","formBody","fetch","method","headers","Authorization","from","toString","body","then","response","json","data","setState","access_token","getTrackInfo","catch","error","console","render","children","name","fileName","_jsxFileName","lineNumber","columnNumber","artists","album"],"sources":["/workspaces/Spotify-Project/src/App.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { Buffer } from 'buffer';\n\ninterface SpotifyAuthState {\n  token: string;\n  track: any; // Type for track object\n}\n\nclass App extends Component<{}, SpotifyAuthState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      token: '',\n      track: null,\n    };\n  }\n\n  componentDidMount() {\n    // Make the request to get the access token\n    const client_id: string = '4b8ab60857d248d789e298cc29c88f8f';\n    const client_secret: string = 'e1102c7222d24e10bd366fcbcd9ebfb9';\n    const details = 'grant_type=client_credentials';\n    const formBody = details;\n\n    fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n        Authorization: 'Basic ' + Buffer.from(client_id + ':' + client_secret).toString('base64'),\n      },\n      body: formBody,\n    })\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ token: data.access_token });\n        this.getTrackInfo(data.access_token);\n      })\n      .catch(error => console.error(error));\n  }\n\n  getTrackInfo(token: string) {\n    // Make the request to get track information\n    fetch('https://api.spotify.com/v1/tracks/0AAMnNeIc6CdnfNU85GwCH', { // Replace {track_id} with the actual track ID\n      headers: {\n        Authorization: 'Bearer ' + token,\n      },\n    })\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ track: data });\n      })\n      .catch(error => console.error(error));\n  }\n\n  render() {\n    const { track } = this.state;\n\n    return (\n      <div>\n        {track ? (\n          <div>\n            <h2>{track.name}</h2>\n            <p>Artist: {track.artists[0].name}</p>\n            <p>Album: {track.album.name}</p>\n          </div>\n        ) : (\n          <p>Loading track information...</p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}